version: '3.8'

services:
  # Sentiment Analysis API Backend
  sentiment-api:
    build:
      context: .
      target: production
    container_name: sentiment-api
    ports:
      - "${API_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=5000
      - API_DEBUG=False
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_TO_FILE=True
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY:-}
      - DEFAULT_MODEL_TYPE=enhanced
      - AUTO_LOAD_BEST_MODEL=True
      - PRELOAD_MODELS=True
      - MAX_WORKERS=4
      - CACHE_ENABLED=True
      - CACHE_TYPE=redis
      - REDIS_HOST=redis
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sentiment-network

  # Frontend React Application
  sentiment-frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: sentiment-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:${API_PORT:-5000}
      - NODE_ENV=production
    depends_on:
      - sentiment-api
    restart: unless-stopped
    networks:
      - sentiment-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentiment-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sentiment-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: sentiment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - sentiment-api
      - sentiment-frontend
    restart: unless-stopped
    networks:
      - sentiment-network
    profiles:
      - production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sentiment-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sentiment-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sentiment-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sentiment-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sentiment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
